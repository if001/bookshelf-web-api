// Code generated by go-swagger; DO NOT EDIT.

package books

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutBooksIDHandlerFunc turns a function with the right signature into a put books ID handler
type PutBooksIDHandlerFunc func(PutBooksIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutBooksIDHandlerFunc) Handle(params PutBooksIDParams) middleware.Responder {
	return fn(params)
}

// PutBooksIDHandler interface for that can handle valid put books ID params
type PutBooksIDHandler interface {
	Handle(PutBooksIDParams) middleware.Responder
}

// NewPutBooksID creates a new http.Handler for the put books ID operation
func NewPutBooksID(ctx *middleware.Context, handler PutBooksIDHandler) *PutBooksID {
	return &PutBooksID{Context: ctx, Handler: handler}
}

/*PutBooksID swagger:route PUT /books/{id} books putBooksId

本の編集

*/
type PutBooksID struct {
	Context *middleware.Context
	Handler PutBooksIDHandler
}

func (o *PutBooksID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutBooksIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
