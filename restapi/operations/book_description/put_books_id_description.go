// Code generated by go-swagger; DO NOT EDIT.

package book_description

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutBooksIDDescriptionHandlerFunc turns a function with the right signature into a put books ID description handler
type PutBooksIDDescriptionHandlerFunc func(PutBooksIDDescriptionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutBooksIDDescriptionHandlerFunc) Handle(params PutBooksIDDescriptionParams) middleware.Responder {
	return fn(params)
}

// PutBooksIDDescriptionHandler interface for that can handle valid put books ID description params
type PutBooksIDDescriptionHandler interface {
	Handle(PutBooksIDDescriptionParams) middleware.Responder
}

// NewPutBooksIDDescription creates a new http.Handler for the put books ID description operation
func NewPutBooksIDDescription(ctx *middleware.Context, handler PutBooksIDDescriptionHandler) *PutBooksIDDescription {
	return &PutBooksIDDescription{Context: ctx, Handler: handler}
}

/*PutBooksIDDescription swagger:route PUT /books/{id}/description book description putBooksIdDescription

本のディスクリプションを編集

*/
type PutBooksIDDescription struct {
	Context *middleware.Context
	Handler PutBooksIDDescriptionHandler
}

func (o *PutBooksIDDescription) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutBooksIDDescriptionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
